---
applicationSet:
  resources:
    requests:
      cpu: "50m"
      memory: "32Mi"
    limits:
      memory: "1Gi"
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
configs:
  params:
    # by default argocd handles SSL termination on its own, which breaks TLS termination on nginx,
    # causing infinite loop
    "server.insecure": true
  repositories:
    gitops:
      name: k8s-gitops
      type: git
      url: https://github.com/zocimek/argocd-test.git
  cm:
    statusbadge.enabled: true
    kustomize.buildOptions: "--enable-alpha-plugins --enable-exec"
    helm.valuesFileSchemes: >-
      secrets+gpg-import, secrets+gpg-import-kubernetes,
      secrets+age-import, secrets+age-import-kubernetes,
      secrets, secrets+literal,
      https
    # this customization make sync-waves work properly
    resource.customizations: |
      argoproj.io/Application:
        health.lua: |
          hs = {}
          hs.status = "Progressing"
          hs.message = ""
          if obj.status ~= nil then
            if obj.status.health ~= nil then
              hs.status = obj.status.health.status
              if obj.status.health.message ~= nil then
                hs.message = obj.status.health.message
              end
            end
          end
          return hs
    resource.exclusions: |
      - apiGroups:
        - cilium.io
        kinds:
        - CiliumIdentity
        clusters:
        - "*"
  rbac:
    policy.csv: g, admins, role:admin
  secret:
    createSecret: false
controller:
  replicas: 2
  metrics:
    enabled: true
    applicationLabels:
      enabled: true
    serviceMonitor: &service-monitor
      enabled: true
      additionalLabels:
        release: kube-prometheus-stack
  resources:
    requests:
      cpu: "50m"
      memory: "256Mi"
    limits:
      memory: "4Gi"
dex:
  enabled: false
global:
  deploymentStrategy:
    type: RollingUpdate
  replicas: 2
  podLabels:
    egress.home.arpa/authelia: allow
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
    seccompProfile:
      type: RuntimeDefault
nameOverride: argo-cd
notifications:
  enabled: true
  replicas: 2
  metrics:
    enabled: true
    serviceMonitor: *service-monitor
# redis-ha:
#   enabled: false
#   serviceAccount:
#     create: true
#   livenessProbe:
#     enabled: true
#   readinessProbe:
#     enabled: true
#   resources:
#     requests:
#       cpu: "50m"
#       memory: "32Mi"
#     limits:
#       memory: "1Gi"
#   exporter:
#     enabled: true
#     resources:
#       requests:
#         cpu: "50m"
#         memory: "32Mi"
#       limits:
#         memory: "1Gi"
#     livenessProbe:
#       enabled: true
#     readinessProbe:
#       enabled: true
#   metrics:
#     enabled: true
#     serviceMonitor:
#       enabled: true
repoServer:
  replicas: 2
  serviceAccount:
    create: true
    name: argocd-repo-server
  dnsConfig:
    # ensure FQDNs are not expanded with search domains, so cilium can apply policies correctly
    options:
      - name: ndots
        value: "1"
  resources:
    requests:
      cpu: "50m"
      memory: "64Mi"
    limits:
      memory: "1Gi"
  rbac:
    - apiGroups:
        - ""
      resources:
        - secrets
      verbs:
        - get
  env:
    - name: HELM_PLUGINS
      value: /custom-tools/helm-plugins/
    - name: HELM_SECRETS_CURL_PATH
      value: /custom-tools/curl
    - name: HELM_SECRETS_SOPS_PATH
      value: /custom-tools/sops
    - name: HELM_SECRETS_VALS_PATH
      value: /custom-tools/vals
    - name: HELM_SECRETS_KUBECTL_PATH
      value: /custom-tools/kubectl
    - name: HELM_SECRETS_BACKEND
      value: sops
    # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
    - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
      value: "false"
    - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
      value: "true"
    - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
      value: "false"
    - name: HELM_SECRETS_WRAPPER_ENABLED
      value: "true"
    - name: HELM_SECRETS_DECRYPT_SECRETS_IN_TMP_DIR
      value: "true"
    - name: HELM_SECRETS_HELM_PATH
      value: /usr/local/bin/helm
  volumes:
    - name: custom-tools
      emptyDir: {}
  volumeMounts:
    - mountPath: /custom-tools
      name: custom-tools
    - mountPath: /usr/local/sbin/helm
      subPath: helm
      name: custom-tools
    - mountPath: /usr/local/bin/kustomize
      name: custom-tools
      subPath: kustomize
      # - mountPath: /usr/local/bin/ksops
      #   name: custom-tools
      #   subPath: ksops
      # - mountPath: /helm-secrets-private-keys/
      #   name: helm-secrets-private-keys
  initContainers:
    - name: gitops-tools
      image: ajaykumar4/gitops-tools:2025.8.0
      imagePullPolicy: Always
      command:
        - sh
        - -ec
      args:
        - |
          mkdir -p /custom-tools/
          cp -rf /gitops-tools/* /custom-tools
          chmod +x /custom-tools/*
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
server:
  replicas: 2
  resources:
    requests:
      cpu: "50m"
      memory: "64Mi"
    limits:
      memory: "1Gi"
  ingress:
    enabled: false
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
